# -*- coding: utf-8 -*-
"""Final_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p7rfTBSx_cDIzUsoq6hDm_4llba0VkrG

Instal Dash
"""


# %pip install dash
# %pip install jupyter-dash
# %pip install dash-bootstrap-components

"""Import Library"""

import plotly.graph_objects as go
import plotly.express as px
from dash import Dash, html, dcc, callback_context
# from jupyter_dash import JupyterDash
import dash_bootstrap_components as dbc
import pandas as pd
import numpy as np
from dash_bootstrap_components._components.Row import Row
from dash.dependencies import Input, Output


""" start seasion """
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
server = app.server

app.title = 'Suicide Dashbord'

"""#### Load data"""

df_suicide = pd.read_csv("./files/master.csv")
df_suicide

df_suicide.drop(columns=['HDI for year'], inplace=True)
df_suicide.dropna(inplace=True)

df_map = pd.read_csv("./files/map_data.csv")
df_map

"""Important Variable Data"""

country = 'United States'
year = 1985
age = '75+ years'

df_suicide_counrty_gender = df_suicide[df_suicide.country == country][df_suicide.sex == 'male']

df_suicide_by_year_age = df_suicide[df_suicide['year'] == year][df_suicide['age']==age]

countries = list(df_suicide['country'].unique())
unique_ages = list(df_suicide['age'].unique())
regions = ['africa', 'asia', 'europe', 'north america', 'south america', 'world']


df_suicide_by_year_age_sex = ['male', 'female']
df_suicide_by_year_age_no = df_suicide_by_year_age[df_suicide_by_year_age['country'] == countries[-3]]['suicides_no']

"""color variable"""

white_color = '#f1f1f1'
black_color = '#24252A'
black_matte = '#424242'
wheat_color = '#ffe1a9' #ffe1a9
wheat_light_color = '#fffaf1' 
red_color = '#6f3d3c'
blue_color = '#636efa'  # #090a38
pink_color = '#FF8B8B'
blue_male_color = '#ABC9FF'
black_plotly_color = '#111111'

import plotly.io as pio
pio.templates

"""Figure Variable"""

fig_bar_all_country = px.bar(data_frame=df_suicide_by_year_age, x='country', y='suicides_no', color='sex', barmode='group', template='plotly_dark', 
                             title='Suicide Number of all country per year and age',color_discrete_map={'male': blue_male_color,'female': pink_color})


fig_line_counrty_gender = px.line(data_frame=df_suicide_counrty_gender, x='year', y='suicides_no', color='age',line_group='sex', 
                                  animation_group='sex', template='plotly_dark', title='Suicide Number of all ages in one country')

fig_pie_for_country = go.Figure(data=[go.Pie(labels=df_suicide_by_year_age_sex, values=df_suicide_by_year_age_no, pull=[0, 0.2], title= country)])
fig_pie_for_country.update_layout(template='plotly_dark', margin=dict(l=10, r=10, t=5, b=5))
fig_pie_for_country.update_traces(marker=dict(colors=pd.Series({'male': blue_male_color,'female': pink_color})))

def show_map(region):
    df = df_map
    if region in ['north america', 'south america']:
        df_fig = df[df['region']=='Americas']
    elif region =='world':
        df_fig = df
    else:
        df_fig = df[df['region']==region.capitalize()]


    sub_country = df_fig['country']
    fig_map_region = go.Figure()

    fig_map_region.add_trace(go.Scattergeo(
        locationmode = 'country names',
        locations=sub_country,
        marker = dict(
            size = df_fig['suicides_no']/(np.sqrt(np.std(df_fig['suicides_no'])))*10,
            color = '#fcc21b',
            line_color='rgb(0,0,0)',
            line_width=1,
            sizemode = 'area'
        ),
        hovertext= df_fig['suicides_no']

        ))


    fig_map_region.update_layout(
            title_text = '<br>Suicides number from 1985 to 2016 in ' + region.capitalize()+'<br>',
        
            width=1200,
            height=800,
            margin=dict(l=10, r=10, t=10, b=10),
            geo = dict(
                scope = region,   ## ['africa', 'asia', 'europe', 'north america', 'south america', 'usa', 'world']
                landcolor = 'rgb(217, 217, 217)',
            )
        )
    return fig_map_region

def div_graph(id_name, fig):
    div = html.Div([
            dcc.Graph(
                id=id_name,
                figure=fig
            )
        ], style={'box-shadow': 'black 0px 0px 10px 10px, red 0px 0px 10px 5px' , 'margin':'17px', 'background': '#fff'})
    
    return div

"""Style Variable"""

style_container = {'background': black_plotly_color, #'margin': 'auto',# 'border': '20px', #'border-top-left-radius': '50%', 'border-top-right-radius': '50%', 
                   'text-align': 'center'}

style_body = {'height': '100%', 'background': white_color}

style_menu = {
    'height': '65%',
    'width': '60%',
    'background': black_plotly_color,
    'margin': '7% 19%',
    'border-radius': '14px',
    'border-style': 'solid',
    'border-color': '#ab0707',
    'border-width': '1px',
    'justify-content': 'center', 
    'align-items': 'center',
    'display': 'flex'
}


style_button = {'color': '#23008f', 'font-size': '20px' , 'display': 'inline-block', 'border-radius': '15px',
                'margin': '5px', 'padding': '4px', 'width': '90px', 'background': '#ddd', 'text-align': 'center' }


style_nums = {'font-size': '35px' , 'border-radius': '5px', # 'box-shadow': 'black 0px 0px 5px 5px, red 0px 0px 5px 4px', 4px inset #852727
                'margin': '10px 10px', 'padding': '8px', 'width': '45%', 'background': '#ddd', 'text-align': 'center', 'border': '4px inset #444444'}

style_num_max = {'font-size': '32px' , 'border-radius': '5px', 'color': wheat_color,
                'margin': '10px 10px', 'padding': '8px', 'width': '50%', 'background': red_color, 'text-align': 'center', 'border': '4px inset #444444'}

style_num_min = {'font-size': '32px' , 'border-radius': '5px', 'color': wheat_light_color,
                'margin': '10px 10px', 'padding': '8px', 'width': '50%', 'background': blue_color, 'text-align': 'center', 'border': '4px inset #444444'}


style_nums_max = {'color':'#f00', 'display': 'flex'}

style_nums_min = {'color':'#00f', 'display': 'flex'}

style_checklist_male = {'color': 'MediumTurqoise', 'font-size': 20 , 'display': 'inline-block', 'color':black_plotly_color, 'border-radius': '15px',
                    'margin': '0px 20px', 'padding': '4px', 'width': '90px', 'background': blue_male_color, 'text-align': 'center' }

style_checklist_female = {'color': 'MediumTurqoise', 'font-size': 20 , 'display': 'inline-block', 'color':wheat_light_color, 'border-radius': '15px',
                    'margin': '0px 20px', 'padding': '4px', 'width': '90px', 'background': pink_color, 'text-align': 'center' }

style_row_box={'padding':'5px', 'margin':'1% 2%', 'background':'#e7e7e7', 'box-shadow': f'black 0px 0px 7px 1px, {blue_male_color} 0px 0px 2px 2px', 'border-radius': '10px'}

"""Divs """

# Left Menu
nav = html.Div(
    [
        html.Div([html.Label('Plots', style = style_button)], id='plots_layout', n_clicks=0, style={'padding':'0px'}),
        html.Div([html.Label('Map', style = style_button)], id='maps_layout', n_clicks=0, style={'padding':'0px'}),
    ],  style =style_menu 
)
left_menu = nav

font_size_num = '16px'
# Insights numbers
div_num = dbc.Row(
    [
        # Max big noise data  
        dbc.Col([
                html.Label([html.Label(['The Highest Suicide Rate In Country'], style={'font-size':font_size_num, 'font-weight': 'normal'}), 'Russian Federation'], style = style_num_max),
                html.Label([html.Label(['The Highest Suicide Rate In year'], style={'font-size':font_size_num, 'font-weight': 'normal'}), html.Br(), html.Br(), '1999'], style = style_num_max),
        ], style=style_nums_max, width=4),


        # Menu
        dbc.Col([left_menu], width=3),


        # Min big noise data 
        dbc.Col([
                 
                 
                html.Label([html.Label(['The Lowest Suicide Rate In Country'], style={'font-size':font_size_num, 'font-weight': 'normal'}), html.Br(), html.Br(), 'Dominica'], style = style_num_min),
                html.Label([html.Label(['The Lowest Suicide Rate In year'], style={'font-size':font_size_num, 'font-weight': 'normal'}), html.Br(), html.Br(),'2016'], style = style_num_min),

                # html.Label('2016', style = style_nums),
                # html.Label('Dominica', style = style_nums),
        ], style=style_nums_min, width=4)
        
    ], justify="center", style={'font-weight': 'bold'}
)

"""### Plots Layout

#### first row
"""

row_dropdown_1 = dbc.Row([
                            dbc.Col([
                                    dcc.Dropdown(unique_ages, id='dropdown_age', value=unique_ages[1])
                            ], width={"size": 6, "offset": 0}),

                            dbc.Col([
                                    dcc.Dropdown(countries, id='dropdown_country_pie1', value=countries[-3])
                            ], width={"size": 2, "offset": 3}),
                    ], justify="center")

row_fig_1=dbc.Row([
                    dbc.Col(
                        [div_graph('fig_bar_all_countries', fig_bar_all_country)]
                    , width=9),
                    
                    dbc.Col(
                        [div_graph('fig_pie_for_country', fig_pie_for_country)]
                    , width=3),
                    
            ], justify="center", style={'margin':'10px 0px', 'padding':0})

row_slider = dbc.Row([
                        dbc.Col([
                                dcc.Slider(
                                id='slider-width', min=df_suicide['year'].min(), max=df_suicide['year'].max(), 
                                value=2010, step=None,
                                marks={str(year): {'label': f'{year}', 'style': {'color': '#000'}} for i, year in enumerate(df_suicide['year'].unique())})
                                ], style={'background': '#a4c8ff', 'margin': '15px', 'border-radius': '12px'}
                        , width=10),
                ], justify="center")

"""#### seconed row

"""

col_dropdown_1=dbc.Col([
                        dcc.Dropdown(countries, id='dropdown_country', value=countries[0])
                ], width=4)

col_checklist = dbc.Col([
                        dcc.Checklist(
                                [
                                    {"label": html.Div(['Male'], style=style_checklist_male), "value": "male"},
                                    {"label": html.Div(['Female'], style=style_checklist_female), "value": "female"}
                                ], value=['male'], id="dropdown_gender", inline=True, style={'text-align': 'center'}
                            )
                    ], width=4)

row_dropdown_2= dbc.Row([
                         col_dropdown_1,
                         col_checklist,
                    ], justify="center")

row_fig_2 = dbc.Row([
                     dbc.Col([
                              div_graph('example-graph2', fig_line_counrty_gender)
                        ], width=12)
                ], justify="center")

"""#### layout of rows"""

div_sub_layout_plots = html.Div( [
                                dbc.Row([
                                        row_dropdown_1,
                                        row_fig_1,
                                        row_slider,                                        
                                    ], style=style_row_box)
                                ,
                                dbc.Row([
                                        row_dropdown_2,
                                        row_fig_2,
                                        
                                ], style=style_row_box)

                            ], id='sub_layout_plots')

"""### Map Layout"""

div_sub_layout_maps = html.Div( [
                                 dbc.Row([
                                        dbc.Row([
                                                dbc.Col([
                                                        dcc.Dropdown(regions, id='dropdown_region', value=regions[0])
                                                    ], width=5),
                                            ], justify="center"),

                                        dbc.Row([
                                                dbc.Col([
                                                         div_graph('fig_map_region', show_map('north america'))
                                                    ], width=8),
                                        ], justify="center", style={'margin':'10px'}),
                                    ])
                           
                            ], id='sub_layout_maps', style={'display': 'none'})

"""## App Layout"""




app.layout = html.Div([
                       # first row for header
                        dbc.Row([
                                dbc.Col([
                                        html.Div([
                                            html.H1(["Suicide  ",
                                                     html.Img(src='assets/cry2.png', style={'width':'5%', 'hight':'5%'})
                                            ], style={'color':white_color, 'margin': '0px'}),
                                            
                                    ], style =style_container),
                                ])  
                        ],justify="center"),
                       dbc.Row([
                                dbc.Col([
                                         div_num,
                                ])
                       ], style={'background':white_color}),
                       
                       # sconed row for body 
                       dbc.Row([
                                # Menu, nums Cols
                                # dbc.Col([left_menu, div_num], width=1),

                                # Plots col
                                dbc.Col([
                                         div_sub_layout_plots,
                                         div_sub_layout_maps
                                ], style= {'margin': '1% 0%',} )
                        ], style=style_body, justify="center"), ##7c7c7c, 363636
                            
    ]
)

# To change Pages
@app.callback(
    Output(component_id='sub_layout_plots', component_property='style'), 
    Output(component_id='sub_layout_maps', component_property='style'), 

    Input("plots_layout", "n_clicks"),
    Input("maps_layout", "n_clicks")
)
def show_clicks(p,m):
    if (p != None) & (m != None):
        changed_id = [p['prop_id'] for p in callback_context.triggered][0]


        if 'plots_layout' in changed_id:
            return {'display': 'block'}, {'display': 'none'}
        elif 'maps_layout' in changed_id:
            return {'display': 'none'}, {'display': 'block'}
        else:
            return {'display': 'block'}, {'display': 'none'}
    else:{'display': 'block'}, {'display': 'none'}


# To control The Plot Page
@app.callback(
    Output("fig_bar_all_countries", "figure"), 
    Output("fig_pie_for_country", "figure"), 
    Output("example-graph2", "figure"), 

    # inputs
    Input("slider-width", "value"),
    Input("dropdown_age", "value"),
    Input("dropdown_country_pie1", "value"),
    Input("dropdown_country", "value"),
    Input("dropdown_gender", "value")
)

def customize_width(year, age, pie_country, country, gender):
    df_suicide_ = df_suicide[df_suicide.year == year][df_suicide.age==age]
    fig = px.bar(data_frame=df_suicide_, x='country', y='suicides_no', color='sex', barmode='group', template='plotly_dark', 
                 title='Suicide Number of all country per year and age',color_discrete_map={'male': blue_male_color,'female': pink_color})


    df_suicide_by_year_age_sex = ['male', 'female']
    df_suicide_by_year_age_no = df_suicide_[df_suicide_['country'] == pie_country]['suicides_no']
    fig_pie = go.Figure(data=[go.Pie(labels=df_suicide_by_year_age_sex, values=df_suicide_by_year_age_no, pull=[0, 0.2], title=pie_country)])
    fig_pie.update_layout(template='plotly_dark', margin=dict(l=5, r=5, t=90, b=5), title_text='<br>The ratio between <br>Male and Famale in '+pie_country)
    fig_pie.update_traces(marker=dict(colors=pd.Series({'male': blue_male_color,'female': pink_color})))


    df_suicide_counrty_gender = df_suicide[df_suicide.country == country][df_suicide.sex.isin(gender)]
    fig2 = px.line(data_frame=df_suicide_counrty_gender, x='year', y='suicides_no', color='age',line_group='sex', animation_group='sex',
                   title='Suicide Number of all ages in '+ country, template='plotly_dark')
    return fig, fig_pie, fig2



# To control The Map Page
@app.callback(
    Output(component_id='fig_map_region', component_property='figure'), 

    Input("dropdown_region", "value"),
)
def show_map_with_region_callback(region):
    return show_map(region)



if __name__ == '__main__':
    app.run_server(debug=True)

